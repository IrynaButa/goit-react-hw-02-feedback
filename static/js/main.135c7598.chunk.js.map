{"version":3,"sources":["Components/Widget.module.css","Components/Statistics.js","Components/FeedbackOptions.js","Components/Section.js","Components/Notification.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Statistics","good","neutral","bad","totalVotes","positivePercentage","className","styles","vote","totalvotes","FeedbackOptions","options","onLeaveFeedback","map","option","type","name","onClick","buttons","Section","title","children","section","Notification","message","notification","App","state","countTotalFeedback","Object","values","reduce","total","countPositiveFeedbackPercentage","Math","round","e","target","setState","prevState","this","objKey","keys","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+HACAA,EAAOC,QAAU,CAAC,WAAa,2BAA2B,UAAY,0BAA0B,MAAQ,sBAAsB,aAAe,6BAA6B,QAAU,wBAAwB,QAAU,wBAAwB,KAAO,qBAAqB,WAAa,6B,qMCqBxQC,EAnBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,WAAYC,EAAnC,EAAmCA,mBAAnC,OACjB,qCACE,oBAAGC,UAAWC,IAAOC,KAArB,kBAAiCP,EAAjC,OACA,oBAAGK,UAAWC,IAAOC,KAArB,sBAAqCN,EAArC,OACA,oBAAGI,UAAWC,IAAOC,KAArB,kBAAiCL,EAAjC,OACA,oBAAGG,UAAWC,IAAOE,WAArB,oBAAyCL,KACzC,oBAAGE,UAAWC,IAAOE,WAArB,gCACsBJ,EADtB,YCcWK,EApBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,8BACGD,EAAQE,KAAI,SAACC,GAAD,OACX,wBAEEC,KAAK,SACLC,KAAMF,EACNG,QAASL,EACTN,UAAWC,IAAOW,QALpB,SAOGJ,GANIA,SCMEK,EAVC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,sBAAKf,UAAWC,IAAOe,QAAvB,UACE,oBAAIhB,UAAWC,IAAOa,MAAtB,SAA8BA,IAC7BC,MCMUE,EATM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,mCACE,oBAAIlB,UAAWC,IAAOkB,aAAtB,SAAqCD,OC4D1BE,E,4MAtDbC,MAAQ,CACN1B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPyB,mBAAqB,WACnB,OAAOC,OAAOC,OAAO,EAAKH,OAAOI,QAC/B,SAACC,EAAOxB,GAAR,OAAkBwB,EAASxB,IAC3B,I,EAIJyB,gCAAkC,WAChC,OAAOC,KAAKC,MAAyB,IAAlB,EAAKR,MAAM1B,KAAc,EAAK2B,uB,EAGnDhB,gBAAkB,SAACwB,GACjB,IAAMpB,EAAOoB,EAAEC,OAAOrB,KACtB,EAAKsB,UAAS,SAACC,GAAD,sBACXvB,EAAOuB,EAAUvB,GAAQ,O,4CAG9B,WACE,MAA+BwB,KAAKb,MAA5B1B,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IACjBsC,EAASZ,OAAOa,KAAKF,KAAKb,OAC1BK,EAAQQ,KAAKZ,qBAEnB,OACE,qCACE,cAAC,EAAD,CAASR,MAAM,8BAAf,SACE,cAAC,EAAD,CACET,QAAS8B,EACT7B,gBAAiB4B,KAAK5B,oBAI1B,cAAC,EAAD,CAASQ,MAAM,aAAf,SACGY,EACC,cAAC,EAAD,CACE/B,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,WAAYoC,KAAKZ,qBACjBvB,mBAAoBmC,KAAKP,oCAG3B,cAAC,EAAD,CAAcT,QAAQ,+B,GAhDhBmB,aCEHC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.135c7598.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"statistics\":\"Widget_statistics__3yW0E\",\"container\":\"Widget_container__3Ns_h\",\"title\":\"Widget_title__RyySM\",\"notification\":\"Widget_notification__51T43\",\"section\":\"Widget_section__27RgZ\",\"buttons\":\"Widget_buttons__27HHB\",\"vote\":\"Widget_vote__2vIay\",\"totalvotes\":\"Widget_totalvotes__1j5S-\"};","import PropTypes from \"prop-types\";\nimport styles from \"./Widget.module.css\";\n\nconst Statistics = ({ good, neutral, bad, totalVotes, positivePercentage }) => (\n  <>\n    <p className={styles.vote}>Good:{good} </p>\n    <p className={styles.vote}>Neutral: {neutral} </p>\n    <p className={styles.vote}>Bad: {bad} </p>\n    <p className={styles.totalvotes}>Total: {totalVotes}</p>\n    <p className={styles.totalvotes}>\n      Positive feedback: {positivePercentage} %\n    </p>\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  totalVotes: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\nexport default Statistics;\n","import PropTypes from \"prop-types\";\nimport styles from \"./Widget.module.css\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <div>\n    {options.map((option) => (\n      <button\n        key={option}\n        type=\"button\"\n        name={option}\n        onClick={onLeaveFeedback}\n        className={styles.buttons}\n      >\n        {option}\n      </button>\n    ))}\n  </div>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\nexport default FeedbackOptions;\n","import PropTypes from \"prop-types\";\nimport styles from \"./Widget.module.css\";\n\nconst Section = ({ title, children }) => (\n  <div className={styles.section}>\n    <h2 className={styles.title}>{title}</h2>\n    {children}\n  </div>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};\nexport default Section;\n","import PropTypes from \"prop-types\";\nimport styles from \"./Widget.module.css\";\n\nconst Notification = ({ message }) => (\n  <>\n    <h3 className={styles.notification}>{message}</h3>\n  </>\n);\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\nexport default Notification;\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport \"modern-normalize/modern-normalize.css\";\n\nimport Statistics from \"./Components/Statistics\";\nimport FeedbackOptions from \"./Components/FeedbackOptions\";\nimport Section from \"./Components/Section\";\nimport Notification from \"./Components/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  countTotalFeedback = () => {\n    return Object.values(this.state).reduce(\n      (total, vote) => (total += vote),\n      0\n    );\n  };\n\n  countPositiveFeedbackPercentage = () => {\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\n  };\n\n  onLeaveFeedback = (e) => {\n    const name = e.target.name;\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    const objKey = Object.keys(this.state);\n    const total = this.countTotalFeedback();\n\n    return (\n      <>\n        <Section title=\"Please, leave your feedback\">\n          <FeedbackOptions\n            options={objKey}\n            onLeaveFeedback={this.onLeaveFeedback}\n          />\n        </Section>\n\n        <Section title=\"Statistics\">\n          {total ? (\n            <Statistics\n              good={good}\n              neutral={neutral}\n              bad={bad}\n              totalVotes={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          ) : (\n            <Notification message=\"No feedback given\" />\n          )}\n        </Section>\n      </>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}